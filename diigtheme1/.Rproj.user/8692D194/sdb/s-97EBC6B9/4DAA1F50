{
    "collab_server" : "",
    "contents" : "################################################################################\n# Budget Breakouts Interactive App with R and Shiny\n# L.Lipsey and G.Coll\n################################################################################\n\nlibrary(png)\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(Cairo)\nlibrary(grid)\nlibrary(gridExtra)\n\nusePackage <- function(p)\n{\n  if (!is.element(p, installed.packages()[,1]))\n    install.packages(p, dep = TRUE)\n  require(p, character.only = TRUE)\n}\nusePackage(\"forcats\")\nusePackage(\"magrittr\")\n\n\n################################################################################\n# 1. Builds the user interface and display areas\n################################################################################\n\n# ui function would become ui.R if you were doing a two-file shiny app\n\nui <- fluidPage(\n\n\n\n  tags$style(HTML(\"\n      @import url('//fonts.googleapis.com/css?family=Open+Sans');\n\n      body {\n        font-family: 'Open Sans',  sans-serif;\n        font-weight: 500;\n        line-height: 1.1;\n        color: #554449;\n      }\n\n    \")),\n\n\n\n\n  ####Copy below to change slider color\n  tags$style(HTML(\".irs-bar {background: #63c5b8}\")),\n  tags$style(HTML(\".irs-bar {border-top: 1px #63c5b8}\")),\n  tags$style(HTML(\".irs-bar {border-bottom: 1px #63c5b8}\")),\n  tags$style(HTML(\".irs-single, .irs-to, .irs-from {background: #628582}\")),\n  #tags$style(HTML(\".irs-slider {background: black}\")),\n  #  tags$style(HTML(\".irs-grid-pol {display: absolute;}\")),\n\n  tags$style(HTML(\".irs-max {color: #554449}\")),\n  tags$style(HTML(\".irs-min {color: #554449}\")),\n  tags$style(HTML(\".irs-bar-edge {border: 1px #63c5b8}\")),\n  tags$style(HTML(\".irs-bar-edge {border-color: 1px #63c5b8}\")),\n  tags$style(HTML(\".irs-bar-edge {border-color: 1px #63c5b8}\")),\n  ####\n\n  fluidRow(\n\n\n\n\n    # left column, with buttons and settings\n    column(3, align = 'center',\n           br(),\n\n           sliderInput('Yr', \"Year Range\",\n                       min = 2000, max = 2015,\n                       value = c(2000,2015),\n                       ticks = FALSE,\n                       step = 1, width = '100%', sep = \"\"),\n           #br(),\n\n           selectizeInput('BreakoutType', \"Breakout\",\n                          c(\"All Contracts\" = \"All\",\n                            \"Products by Category\" = \"Prd\",\n                            \"Services by Category\" = \"Svc\",\n                            \"R&D by Stage\" = \"RnD\"),\n                          selected = \"All\",\n                          #selectize = FALSE,\n                          width = '100%'\n           ),\n\n           #br(),\n\n           selectInput('C',\"Customer\",\n                       c(\"Air Force\", \"Army\", \"Navy\", \"MDA\",\n                         \"DLA\", \"Other DoD\"),\n                       multiple = TRUE,\n                       selectize = FALSE,\n                       selected = c(\"Air Force\", \"Army\", \"Navy\", \"MDA\",\n                                    \"DLA\",\"Other DoD\"),\n                       width = '100%',\n                       size = 6),\n\n           #br(),\n           # shiny::actionButton(inputId='ab1', label=\"The CSIS Methodology\",\n           #                     #icon = icon(\"th\"),\n           #                     onclick =\"window.open('http://google.com', '_blank')\",\n           #                     width = \"100%\")\n           # ,\n           # br(),\n           # br(),\n           downloadLink('CSVDownloadBtn',\n                        \"Download Displayed Data (csv)\", class = \"butt\"),\n\n           br(),\n           br(),\n\n           helpText(HTML(\"<strong>Directions:</strong>\",\n                         \"click on each bar for more detailed information\"\n           )),\n\n\n           #actionButton(\"action\", label = \"The CSIS Methodology\"),\n\n           tags$head(tags$style(\".help-block{color: #554449;\n                                font-size: 14px;\n                                font-style: normal;\n                                background-color: #EDECEB;\n                                border-color: #C76363;\n                                border-style: solid;\n                                border-width: 6px;\n                                border-top: 6px #63c5b8;\n                                border-bottom: 6px #63c5b8;\n                                border-right: 6px #63c5b8;\n                                #border-left: 6px #63c5b8;\n                                border-radius: 5px;\n\n                                }\"\n                    )),\n           br(),\n           # small plot and text area for on-click info\n           #fluidRow(\n           #column(12, align = 'left',\n\n           # on-click text area\n           textOutput('clickloc'),\n\n           # style options for text box, in CSS/HTML\n           # I don't really understand how this works and mostly\n           # copied it off something I googled.\n           tags$head(tags$style(\"#clickloc{color: #554449;\n                                font-size: 14px;\n                                font-style: normal;\n                                background-color: #EDECEB;\n                                border-color: #628582;\n                                border-style: solid;\n                                border-width: 6px;\n                                border-top: 6px #63c5b8;\n                                border-bottom: 6px #63c5b8;\n                                border-right: 6px #63c5b8;\n                                #border-left: 6px #63c5b8;\n                                border-radius: 5px;\n\n                                }\"\n                    ))\n           ),\n    #),\n\n    # right column, with output areas\n    column(9, align = 'center',\n           #h2(\" \", align = \"center\"),\n\n           # large plot area\n           div(\n             style = \"position:relative\",\n             plotOutput(\"plot\", height = '525px',\n                        click = clickOpts(id =\".plot_click\"),\n                        hover = hoverOpts(id = \"plot_hover\",\n                                          delay = 30, delayType = \"debounce\")),\n             uiOutput(\"hover_info\")\n           ),\n\n           # # small plot and text area for on-click info\n           # fluidRow(\n           #   column(12, align = 'left',\n           #\n           #          # on-click text area\n           #          textOutput('clickloc'),\n           #\n           #          # style options for text box, in CSS/HTML\n           #          # I don't really understand how this works and mostly\n           #          # copied it off something I googled.\n           #          tags$head(tags$style(\"#clickloc{color: #554449;\n           #                               font-size: 18px;\n           #                               font-style: bold;\n           #                               }\"\n           #          ))\n           #   )),\n\n           br(),\n\n           fluidRow(\n\n             column(1),\n\n             # on-click plot area\n             column(12, align = 'center', plotOutput(\"clickplot\", height = '200px')\n             )\n           ))\n\n           )\n           )\n\n# start of server function - this would be server.R if you were doing a\n# two-file shiny app\n\nserver <- function(input, output, session){\n\n  ################################################################################\n  # 2. Reads in and cleans up data initially\n  ################################################################################\n\n  # read in data\n  FullData <- read.csv(\"Breakouts.csv\")\n\n  # rename MilitaryHealth to be shorter\n  #levels(FullData$Customer)[5] <- \"Mil Health\"\n\n  # Fiscal year is a category, not a numeric variable - never mind, it's numeric\n  # FullData$FY <- as.factor(FullData$FY)\n\n  # Rescale total obligations variable (Amount) to units of $Billion\n  FullData$Amount <- FullData$Amount / 1000000000\n  FullData <- dplyr::rename(FullData, Billion = Amount)\n\n  # Reorder Category levels so R&D will be on top of bars in graph\n  FullData$Category <- factor(FullData$Category, levels =\n                                c(\"R&D\", \"Services\", \"Products\"))\n\n  FullData$Customer[FullData$Customer == \"MilitaryHealth\"] <- \"Other DoD\"\n\n  # Reorder Breakouts levels to stack them in the correct order on bar charts\n  FullData$Breakout <- factor(FullData$Breakout, levels =\n                                c(\n\n                                  # R&D breakouts\n                                  \"Basic Research (6.1)\",\n                                  \"Applied Research (6.2)\",\n                                  \"Adv. Technology Dev. (6.3)\",\n                                  \"Adv. Component Dev. & Prototypes (6.4)\",\n                                  \"System Dev. & Demonstration (6.5)\",\n                                  \"Operational Systems Dev. (6.7)\",\n                                  \"Operation of Government R&D Facilities\",\n\n                                  # products breakouts\n                                  \"Aircraft\",\n                                  \"Missiles & Space\",\n                                  \"Ground Vehicles\",\n                                  \"Engines & Power Plants\",\n                                  \"Fuels\",\n                                  \"Ships\",\n                                  \"Launchers & Munitions\",\n                                  \"Electronics & Communications\",\n                                  \"Clothing & Subsistence\",\n                                  \"Other\",\n\n                                  # services breakouts\n                                  \"ERS\",\n                                  \"FRS&C\",\n                                  \"ICT\",\n                                  \"MED\",\n                                  \"PAMS\"\n                                ))\n\n  #FullData$Breakout <- fct_rev(FullData$Breakout)\n\n  # save FY as 2 digits instead of 4, for better visual scale\n  # FullData$FY <- factor(substring(as.character(FullData$FY), 3, 4))\n\n\n  ################################################################################\n  # 3. Subsets data based on user inputs\n  ################################################################################\n\n  dataset <- reactive({\n\n    # subset based on year, as requested by user -\n    # would work fine filtering by (input > lower limit & input < upper limit)\n    # but the findInterval function seems a bit faster\n    shown <- filter(FullData, FY >= input$Yr[1] & FY <= input$Yr[2])\n\n    # subset based on customer field, as requested by user\n    shown <- filter(shown, Customer %in% input$C)\n\n    # subset to products / services / R&D for the breakout graph types,\n    # and rename the \"breakout\" variable to \"category.\"\n    # Do nothing for the all contracts graph type; it already uses \"category\"\n    switch(input$BreakoutType,\n           \"Prd\" = {\n             shown <- filter(shown, Category == \"Products\")\n             shown <- select(shown, -Category)\n             names(shown)[names(shown)==\"Breakout\"] <- \"Category\"\n           },\n           \"Svc\" = {\n             shown <- filter(shown, Category == \"Services\")\n             shown <- select(shown, -Category)\n             names(shown)[names(shown)==\"Breakout\"] <- \"Category\"\n           },\n           \"RnD\" = {\n             shown <- filter(shown, Category == \"R&D\")\n             shown <- filter(shown, Breakout !=\n                               \"Operation of Government R&D Facilities\")\n             shown <- select(shown, -Category)\n             names(shown)[names(shown)==\"Breakout\"] <-\n               \"Category\"\n           }\n    )\n\n    #aggregate obligations amount by FY and breakout category\n    shown <- shown %>%\n      group_by(FY, Category) %>%\n      summarise(Billion = sum(Billion))\n\n    # add midpoint of amounts (\"pos\") so we can put numbers on the bars in plot\n    shown <- shown %>%\n      group_by(FY) %>%\n      mutate(pos = (cumsum(Billion) - (0.5* Billion)))\n\n    # remove negative values to stop them from generating error messages\n    shown <- shown %>%\n      mutate(Billion = replace(Billion, which(Billion < 0L), 0))\n\n    # calculate yearly totals (\"sumBillion\")\n    shown <- shown %>%\n      group_by(FY) %>%\n      mutate(sumBillion = sum(Billion))\n\n    # track highest total billions in a year\n    highbill <- shown %>%\n      summarize(max(sumBillion)) %>%\n      unlist\n\n\n    # create subtotals (\"ongraph\") to add to the plot -\n    # these will be the white numbers on the bars\n    # modify number of decimal places according to how large totals are\n    # decimals <- 2 - (max(c(floor(log10(highbill)*1.5), 0)))\n    # shown$ongraph <- round(shown$Billion, decimals)\n\n\n    # drop subtotals if they'll be too small to display well\n    # current test: less than 3.5% of largest bar\n    # shown$ongraph[shown$ongraph <= 0.99*highbill] <- NA\n\n    # return updated dataset\n    shown\n\n  })\n\n\n\n  ################################################################################\n  # 4. Defines color settings for plot\n  ################################################################################\n\n  # Color scale for Breakouts and Category\n  colorset <-\n    c(\n      # overall chart colors\n      \"Products\" = \"#CE884E\",\n      \"Services\" = \"#63c5b8\",\n      \"R&D\" = \"#628582\",\n\n      # products colors\n      \"Aircraft\" = \"#554449\",\n      \"Missiles & Space\" = \"#5F597C\",\n      \"Ground Vehicles\" = \"#36605a\",\n      \"Engines & Power Plants\" = \"#AD4545\",\n      \"Fuels\" = \"#008e9d\",\n      \"Ships\" = \"#599a9e\",\n      \"Launchers & Munitions\" = \"#CE884E\",\n      \"Electronics & Communications\" = \"#63c5b8\",\n      #\"Clothing & Subsistence\" = \"#C74F4F\",\n      \"Clothing & Subsistence\" = \"#C76363\",\n      \"Other\" = \"#628582\",\n\n      # services colors\n      \"ERS\" = \"#CE884E\",\n      \"FRS&C\" = \"#008e9d\",\n      \"ICT\" = \"#63c5b8\",\n      \"MED\" = \"#C74F4F\",\n      \"PAMS\" = \"#628582\",\n\n      # R&D colors\n      \"Basic Research (6.1)\" = \"#008e9d\",\n      \"Applied Research (6.2)\" = \"#599a9e\",\n      \"Adv. Technology Dev. (6.3)\" = \"#CE884E\",\n      \"Adv. Component Dev. & Prototypes (6.4)\" = \"#63c5b8\",\n      \"System Dev. & Demonstration (6.5)\" = \"#C74F4F\",\n      \"Operational Systems Dev. (6.7)\" = \"#628582\"\n\n    )\n\n  #coll: Titles for the legend. Also added a space to the end of titles for a more spread out legend\n  nameset <-\n    c(\n      # overall chart titles\n      \"Products\" = \"Products \",\n      \"Services\" = \"Services \",\n      \"R&D\" = \"Research & Development \",\n\n      # products titles\n      \"Aircraft\" = \"Aircraft \",\n      \"Missiles & Space\" = \"Missiles & Space \",\n      \"Ground Vehicles\" = \"Ground Vehicles \",\n      \"Engines & Power Plants\" = \"Enginges & Power Plants \",\n      \"Fuels\" = \"Fuels \",\n      \"Ships\" = \"Ships \",\n      \"Launchers & Munitions\" = \"Launchers & Munitions \",\n      \"Electronics & Communications\" = \"Electronics & Communications \",\n      \"Clothing & Subsistence\" = \"Clothing & Subsistence \",\n      \"Other\" = \"Other \",\n\n      # services titles\n      \"ERS\" = \"Equipment \",\n      \"FRS&C\" = \"Facilities \",\n      \"ICT\" = \"Information and Communications Technology \",\n      \"MED\" = \"Medical \",\n      \"PAMS\" = \"Professional, Administrative, and Management \",\n\n      # R&D titles\n      \"Basic Research (6.1)\" = \"Basic Research (6.1) \",\n      \"Applied Research (6.2)\" = \"Applied Research (6.2) \",\n      \"Adv. Technology Dev. (6.3)\" = \"Advanced Technology Development (6.3) \",\n      \"Adv. Component Dev. & Prototypes (6.4)\" = \"Advanced Component Development & Prototypes (6.4) \",\n      \"System Dev. & Demonstration (6.5)\" = \"System Development & Demonstration (6.5) \",\n      \"Operational Systems Dev. (6.7)\" = \"Operational Systems Development (6.7) \"\n    )\n\n  DIIGcolors <- scale_fill_manual(values = colorset, name = NULL, labels = nameset)\n  DIIGline <- scale_color_manual(values = colorset, name = NULL, labels= nameset)\n\n\n  ################################################################################\n  # 5. Dynamic plot title based on options selected\n  ################################################################################\n  # http://stackoverflow.com/questions/19957536/add-dynamic-subtitle-using-ggplot\n\n  getTitle <- function(){\n\n    # initialize character variables for title and subtitle\n    plot.title <- character()\n    plot.subtitle <- character()\n\n    # assign title based on type of plot selected\n    switch(input$BreakoutType,\n           \"All\" = {\n             plot.title <- \"Contract Obligations by Major Area\"\n           },\n           \"Prd\" = {\n             plot.title <- \"Products Obligations by Product Type\"\n           },\n           \"Svc\" = {\n             plot.title <- \"Services Obligations by Service Type\"\n           },\n           \"RnD\" = {\n             plot.title <- \"Research & Development Obligations by Phase\"\n           }\n    )\n\n    # create subtitle based on customers selected\n    if(length(input$C) == 7){\n      plot.subtitle <- \"Overall DoD Customers\"\n    } else {\n      plot.subtitle <- paste(input$C, collapse = \", \")\n    }\n\n    # add FY to subtitle\n    plot.subtitle <- paste(plot.subtitle, \"in Fiscal Years\", input$Yr[1],\n                           \"to\", input$Yr[2])\n\n    # return ggtitle with dynamic title and subtitle included\n    ggtitle(bquote(atop(bold(.(plot.title)),\n                        atop(italic(.(plot.subtitle)), \"\"))))\n\n  }\n\n  ##############################################################################\n  # 6. Builds plot based on user input\n  ##############################################################################\n\n  plotsettings <- function(){\n\n    plotdata <- dataset()\n\n    # determine y-axis position (\"overpos\") to display yearly totals\n    plotdata$overpos <- plotdata$sumBillion + (0.03 * max(plotdata$sumBillion))\n\n    # round yearly totals\n    if(max(plotdata$sumBillion) >= 150){\n      plotdata$sumBillion <- round(plotdata$sumBillion)\n    } else if(max(plotdata$sumBillion >= 5)){\n      plotdata$sumBillion <- round(signif(plotdata$sumBillion, 3), 1)\n    } else {\n      plotdata$sumBillion <- round(signif(plotdata$sumBillion, 3), 2)\n    }\n\n\n    # Get the logo\n    setwd(\"H:/Logos\")\n    img <- readPNG(\"ISP_new.png\")\n    f <- rasterGrob(img)\n\n    # build the plot with a long string of ggplot commands\n    p <- ggplot(data = plotdata,\n                aes(x=FY, y=Billion, fill = Category)) +\n      geom_bar(stat = 'identity', width = 0.7,\n               size = 0.9) +\n\n\n\n      # DIIGcolors defined in section 4\n      DIIGcolors +\n\n\n      # Custom background color / layout\n      theme(panel.border = element_blank(),\n            panel.background = element_rect(fill = \"white\"),\n            plot.background = element_rect(fill = \"white\", color=\"white\"),\n            #plot.background = element_rect(fill=\"#F9FBFF\"), second choice\n            #plot.background = element_rect(fill=\"#EFF1F5\"),\n            #plot.background = element_rect(fill=\"#ECF2F5\"),\n            panel.grid.major.x = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.grid.major.y = element_line(size=.1, color=\"lightgray\"),\n            panel.grid.minor.y = element_line(size=.1, color=\"lightgray\")) +\n\n      scale_x_continuous(breaks = seq(input$Yr[1], input$Yr[2], by = 1),\n                         labels = function(x) {substring(as.character(x), 3, 4)}) +\n\n\n\n\n      # Added title\n      getTitle() +\n\n      # ongraph and pos are for displaying the sub-category totals\n      # (white numbers) and are defined in section 3\n      # geom_text(aes(label = ongraph, y = pos), size = 4,\n      #           color = 'white', fontface = 'bold', family = 'Arial') +\n\n      # sumBillion and overpos are for displaying the yearly totals\n      # (grey30 numbers) and are defined earlier in this section\n      geom_text(aes(label = sumBillion, y = overpos), size = 5,\n                color = '#554449', fontface = 'bold', family = \"Open Sans\") +\n\n      diigtheme1:::diiggraph()+\n\n      # theme(plot.title = element_text(\n      #   family = \"Arial\", color = \"#554449\", size = 26, face=\"bold\",\n      #   margin=margin(20,0,20,0), hjust = 0.5)) +\n      # theme(axis.text.x = element_text(\n      #   size = 15, family = \"Arial\", vjust=7, margin=margin(-10,0,0,0))) +\n      # theme(axis.text.y = element_text(\n      #   size = 15, family = \"Arial\", color =\"#554449\", margin=margin(0,5,0,0))) +\n      # theme(axis.title.x = element_text(\n      #   size = 16, face = \"bold\", color = \"#554449\", family = \"Arial\",\n      #   margin=margin(15,0,0,60))) +\n    # theme(axis.title.y = element_text(\n    #   size = 16, face = \"bold\", color = \"#554449\", family = \"Arial\",\n    #   margin=margin(0,15,0,0))) +\n    # theme(axis.ticks.x = element_blank()) +\n    # theme(axis.ticks.y = element_blank()) +\n    # theme(legend.text = element_text(size = 15, family = \"Arial\", color =\"#554449\")) +\n    # theme(legend.position = 'bottom') +\n    # theme(legend.background = element_rect(fill = \"white\")) +\n    # guides(fill=guide_legend(keywidth = 1.5, keyheight = 1.5)) +\n    xlab(\"Fiscal Year\") +\n      ylab(\"Constant 2015 $ Billions\") +\n      labs( caption = \"Source: FPDS; CSIS analysis\",family= \"Open Sans\")\n\n\n\n    # settings for the highlight box that appears when clicking the plot\n    if(HL$on){\n      return(p + annotate(\"rect\", xmin = HL$xmin,\n                          xmax = HL$xmax,\n                          ymin = HL$ymin,\n                          ymax = HL$ymax,\n                          #color = \"#E2E264\",\n                          size = .6,\n                          fill = \"white\",\n                          alpha = 0.5)\n      )\n    }\n\n\n\n    # return the built plot\n    p\n\n\n  }\n\n\n\n  ################################################################################\n  # 7. Figures out what year/category the user clicked and highlights it\n  ################################################################################\n\n  # Initialize tracking variables for plot highlighting,\n  # to store whether to draw a highlight and if so, where to draw it.\n\n  # These are necessary because we want to draw a highlight on user click,\n  # but drawing the highlight involves redrawing the plot,\n  # which resets input$.plot_click to NULL and discards info from it.  So these\n  # values (\"HL\") are used to save that info before it gets discarded upon redraw.\n  HL <- reactiveValues(\n    on = FALSE, cat = NULL, year = NULL,\n    xmin = NULL, xmax = NULL, ymin = NULL, ymax = NULL\n  )\n\n  observeEvent(input$.plot_click,{\n    currentdata <- dataset()\n    year <- round(input$.plot_click$x)\n    cat <- clickcat(year, currentdata)\n    if(is.null(cat)){\n      HL$on <- FALSE\n    } else {\n      hlpos <- currentdata %>%\n        filter(Category == cat & FY == year) %>%\n        {.$sumBillion - .$pos} %>%\n        unlist\n\n      hlbil <- currentdata %>%\n        filter(Category == cat & FY == year) %>%\n        .$Billion %>%\n        unlist\n\n      # hlpos <- currentdata$sumBillion[currentdata$Category == cat &\n      #     currentdata$FY == year] -\n      #   currentdata$pos[currentdata$Category == cat & currentdata$FY == year]\n      #\n      # hlbil <- currentdata$Billion[currentdata$Category == cat &\n      #     currentdata$FY == year]\n      #\n      # turn highlighting on\n      HL$on <- TRUE\n\n      # save values for the category and year where the user clicked\n      HL$cat <- cat\n      HL$year <- year\n\n      # save values for the four sides of the highlight rectangle\n      HL$xmin <- round(input$.plot_click$x) - 0.4\n      HL$xmax <- round(input$.plot_click$x) + 0.4\n      HL$ymin <- hlpos - (0.5 * hlbil)\n      HL$ymax <- hlpos + (0.5 * hlbil)\n    }\n  })\n\n  # turns the highlight off when user changes any plot setting\n  observeEvent(input$C, {\n    HL$on <- FALSE\n  })\n  observeEvent(input$BreakoutType, {\n    HL$on <- FALSE\n  })\n  observeEvent(input$Yr, {\n    HL$on <- FALSE\n  })\n\n  # Given year and currently loaded data, returns category in which user clicked.\n  # Called by the click observer function above.\n\n  # Works by treating the y-location of the user's click (\"total\") as an amount\n  # (in billions of $), and subtracting each category from that amount until it\n  # goes below zero, then returning the last category subtracted.\n  # A while loop probably wasn't the fastest or most elegant way to do this.\n  clickcat <- function(year, loaded){\n    yearmoney <- loaded %>%\n      filter(FY == year) %>%\n      use_series(Billion)\n\n    i <- length(yearmoney)\n    total <- input$.plot_click$y\n    if(total > sum(yearmoney)){\n      return(NULL)\n    }\n    while(total - yearmoney[i] > 0){\n      total <- total - yearmoney[i]\n      i <- i-1\n    }\n    loaded$Category[i]\n  }\n\n  ################################################################################\n  # 8. Creates on-click detailed output (text and small graph)\n  ################################################################################\n\n  output$clickloc <-  renderText({\n    clicktextsettings()\n  })\n\n  output$clickplot <- renderPlot({\n    clickplotsettings()\n  })\n\n  # clickplotsettings called to produce the small plot upon user click\n  clickplotsettings <- function(){\n    if(!HL$on){\n      return(NULL)\n    }\n    clickplotdata <- dataset()\n\n    # subset to show only the selected category\n    clickplotdata <- filter(clickplotdata, Category == HL$cat)\n\n    # set the y axis max for the small line graph\n    ymaxdisp <- max(clickplotdata$Billion)\n    ymaxdisp <- ymaxdisp * 1.05\n\n\n    # ggplot command for the small plot\n    p <- ggplot(data = clickplotdata, aes(x = FY, y = Billion)) +\n      geom_line(aes(group = Category, color = Category), size = 2)+\n\n      # DIIGline colors the line depending on category, defined in sec. 4\n      DIIGline +\n\n      diigtheme1:::diiggraph()+\n\n      # theme(legend.position = 'none') +\n      # #theme(legend.text = element_text(size = 15, family = \"Arial\", color =\"#554449\")) +\n      # theme(legend.text = element_blank()) +\n      # theme(legend.key = element_rect(fill = \"white\")) +\n      # theme(plot.title = element_text(\n      #   family = \"Arial\", color = \"#554449\", size = 26, face=\"bold\", margin=margin(20,0,20,0))) +\n      # theme(axis.text.x = element_text(\n      #   size = 15, family = \"Arial\", vjust=7, margin=margin(5,0,0,0))) +\n      # theme(axis.text.y = element_text(\n      #   size = 15, family = \"Arial\", color =\"#554449\", margin=margin(0,5,0,0))) +\n    # # theme(axis.title.x = element_text(\n    # #   size = 16, face = \"bold\", color = \"#554449\", family = \"Arial\",\n    # #   margin=margin(35,0,0,0))) +\n    # theme(plot.background = element_rect(fill=\"white\"))+\n    # theme(axis.title.y = element_text(\n    #   size = 16, face = \"bold\", color = \"#554449\", family = \"Arial\",\n    #   margin=margin(0,15,0,0))) +\n\n    scale_x_continuous(breaks = seq(input$Yr[1], input$Yr[2], by = 1),\n                       labels = function(x) {substring(as.character(x), 3, 4)}) +\n\n      # coll: got rid of ticks on the axis\n      theme(axis.ticks.x = element_blank()) +\n      theme(axis.ticks.y = element_blank()) +\n\n      theme(axis.title.x = element_text()) +\n      theme(axis.title.y = element_text(\n        color = \"#554449\", family = \"Arial\")) +\n\n      # ymaxdisp defined above, the maximum of the y axis\n      coord_cartesian(ylim = c(0, ymaxdisp)) +\n      ylab(\" \") +\n      theme(axis.title.x = element_blank()) +\n\n      # set background theme\n      theme(panel.border = element_blank(),\n            panel.background = element_blank(),\n            panel.grid.major.x = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.grid.major.y = element_line(size=.1, color=\"lightgray\"),\n            panel.grid.minor.y = element_line(size=.1, color=\"lightgray\"))\n\n    # return plot for output\n    p\n\n  }\n\n\n  # clicktextsettings called to produce text information upon user click\n  clicktextsettings <- function(){\n\n    if(!HL$on){\n      return(\" \")\n    }\n\n\n    clicktextdata <- dataset()\n    clickamount <- clicktextdata$Billion[clicktextdata$Category == HL$cat &\n                                           clicktextdata$FY == HL$year]\n\n    # build string for selected customer(s)\n    cust <- character()\n    if(length(input$C) == 7){\n      cust <- \"All DoD Customers\"\n    } else {\n      cust <- paste(input$C, collapse = \", \")\n    }\n\n    # build string for change from previous year\n    yearchange <- character()\n    if(HL$year == input$Yr[1]){\n      yearchange <- \"with no data shown from the previous year.\"\n    } else {\n      prevyear <- HL$year- 1\n      prevamount <- clicktextdata$Billion[clicktextdata$Category == HL$cat &\n                                            clicktextdata$FY == prevyear]\n      if(clickamount > prevamount){\n        yearchange <- paste(\"a \", round(100*(clickamount - prevamount) /\n                                          prevamount, 2), \"% increase from FY\", prevyear,\n                            \".\", sep = \"\")\n      } else {\n        yearchange <- paste(\"a \", round(-100*(clickamount - prevamount) /\n                                          prevamount, 2), \"% decrease from FY\", prevyear,\n                            \".\", sep = \"\")\n      }\n    }\n\n    # return a combination of all strings, for output in the text box\n    paste(cust, \" obligations for \", HL$cat, \" in FY\", HL$year, \": \",\n          \"$\", round(clickamount, 2), \"B,\\n\", yearchange, sep = \"\")\n\n  }\n\n\n  ################################################################################\n  # 10. Shows updated plot whenever the user changes a setting\n  ################################################################################\n\n  output$plot <- renderPlot({\n    plotsettings()\n  })\n\n  output$CSVDownloadBtn <- downloadHandler(\n    filename = paste('CSIS.Contract Obligations.', Sys.Date(),'.csv', sep=''),\n    content = function(file) {\n      writedata <- dataset()\n      writedata <- select(writedata, FY, Category, Billion)\n      write.csv(writedata, file)\n    }\n  )\n\n\n  # inserted for hovertips - see https://gitlab.com/snippets/16220\n  # and https://groups.google.com/forum/#!topic/shiny-discuss/dTywKfh4XCo\n  output$hover_info <- renderUI({\n    hover <- input$plot_hover\n    if(is.null(hover$x)) return()\n    if(is.null(hover$y)) return()\n    if(round(hover$x) < input$Yr[1] | round(hover$x) > input$Yr[2]) return()\n    shown <- dataset()\n    shown <- shown %>%\n      filter(FY == round(hover$x))\n    if(hover$y > max(shown$sumBillion) | hover$y < 0) return()\n\n    # calculate point position INSIDE the image as percent of total dimensions\n    # from left (horizontal) and from top (vertical)\n    left_pct <- (hover$x - hover$domain$left) /\n      (hover$domain$right - hover$domain$left)\n    top_pct <- (hover$domain$top - hover$y) /\n      (hover$domain$top - hover$domain$bottom)\n\n    # calculate distance from left and bottom side of the picture in pixels\n    left_px <- hover$range$left + left_pct *\n      (hover$range$right - hover$range$left)\n    top_px <- hover$range$top + top_pct *\n      (hover$range$bottom - hover$range$top)\n\n    # create style property fot tooltip\n    # background color is set so tooltip is a bit transparent\n    # z-index is set so we are sure are tooltip will be on top\n    style <- paste0(\n      \"position:absolute; z-index:100; font-family: 'Open Sans'; background-color: rgba(245, 245, 245, 0.85); \",\n      \"left:\", left_px + 2, \"px; top:\", top_px + 2, \"px;\")\n\n    # figure out what to show on tooltip -LCL\n\n    n <- length(shown$Billion)\n    current <- shown$Billion[n]\n    while(hover$y > current){\n      n <- n-1\n      current <- sum(shown$Billion[n:length(shown$Billion)])\n    }\n    cat_shown <- shown$Category[n]\n    amount_shown <- round(shown$Billion[n],2)\n\n\n    # actual tooltip created as wellPanel\n    wellPanel(\n      style = style,\n      p(HTML(paste0(\"<b> Year: </b>\", round(hover$x), \"<br/>\",\n                    \"<b> Category: </b>\", cat_shown, \"<br/>\",\n                    \"<b> Amount: </b> $\", amount_shown, \" billion\")))\n    )\n\n  })\n\n  # this bracket ends the \"server\" function that started way back in section 1\n}\n\n################################################################################\n# 11. Starts the app\n################################################################################\nshinyApp(ui= ui, server = server)\n",
    "created" : 1488472883749.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3360807699",
    "id" : "4DAA1F50",
    "lastKnownWriteTime" : 1488484594,
    "last_content_update" : 1488484594288,
    "path" : "H:/1.FPDS/1.Breakout/app.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}